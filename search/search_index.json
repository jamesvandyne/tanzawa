{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Tanzawa is a blogging system designed for the IndieWeb that focuses on sustainability. Requirements Running Tanzawa outside of Docker requires the following: Python 3.9 Spatalite (Geo-enabled SQLite) or Postgres with PostGIS enabled. We recommend Spatalite for most blogs. If you are running Tanzawa outside of Docker, refer to the GeoDjango installation documentation for setting up the appropriate environment. Prepare Docker Image $ git clone git@github.com:jamesvandyne/tanzawa.git $ cd tanzawa $ docker image build . -t tanzawa Prepare your .env file and generate a secure secret key and append it to your .env file $ cp .env.sample .env $ python3 -c \"import secrets; print(secrets.token_urlsafe())\" | xargs -I{} -n1 echo SECRET_KEY={} >> .env First Run Start a container and open a shell. $ docker run --rm -p 8000:8000 -v $PWD:/app -it tanzawa bash Prepare the database and create your user account $ cd /app $ python3 apps/manage.py migrate $ python3 apps/manage.py createsuperuser Running the Development Web server From inside the container, start the Django development server. $ python3 apps/manage.py runserver 0.0.0.0:8000 Confirm you can login using your account by opening the Tanzawa Dashboard at https://127.0.0.1:8000/a/ .","title":"Getting Started"},{"location":"#getting-started","text":"Tanzawa is a blogging system designed for the IndieWeb that focuses on sustainability.","title":"Getting Started"},{"location":"#requirements","text":"Running Tanzawa outside of Docker requires the following: Python 3.9 Spatalite (Geo-enabled SQLite) or Postgres with PostGIS enabled. We recommend Spatalite for most blogs. If you are running Tanzawa outside of Docker, refer to the GeoDjango installation documentation for setting up the appropriate environment.","title":"Requirements"},{"location":"#prepare-docker-image","text":"$ git clone git@github.com:jamesvandyne/tanzawa.git $ cd tanzawa $ docker image build . -t tanzawa Prepare your .env file and generate a secure secret key and append it to your .env file $ cp .env.sample .env $ python3 -c \"import secrets; print(secrets.token_urlsafe())\" | xargs -I{} -n1 echo SECRET_KEY={} >> .env","title":"Prepare Docker Image"},{"location":"#first-run","text":"Start a container and open a shell. $ docker run --rm -p 8000:8000 -v $PWD:/app -it tanzawa bash","title":"First Run"},{"location":"#prepare-the-database-and-create-your-user-account","text":"$ cd /app $ python3 apps/manage.py migrate $ python3 apps/manage.py createsuperuser","title":"Prepare the database and create your user account"},{"location":"#running-the-development-web-server","text":"From inside the container, start the Django development server. $ python3 apps/manage.py runserver 0.0.0.0:8000 Confirm you can login using your account by opening the Tanzawa Dashboard at https://127.0.0.1:8000/a/ .","title":"Running the Development Web server"},{"location":"customization/","text":"Customization Site Name Visit the Django Settings by visiting /admin/ or opening the Tanzawa Dashboard and clicking Settings . Click the \"Site Settings\" and add a record. Add Streams / Modifying the Navigation Streams are how you categorize posts in Tanzawa. By default Tanzawa creates streams to covert most basic IndieWeb content types. Open the Django Settings in your browser /admin/ Click add stream and fill in the form as you wish. Icon: Input an emoji of your choice. Name: This will appear on the left as navigation. Slug: Generally this is the name in lowercase and will appear in stream urls e.g. example.com/notes","title":"Customization"},{"location":"customization/#customization","text":"","title":"Customization"},{"location":"customization/#site-name","text":"Visit the Django Settings by visiting /admin/ or opening the Tanzawa Dashboard and clicking Settings . Click the \"Site Settings\" and add a record.","title":"Site Name"},{"location":"customization/#add-streams-modifying-the-navigation","text":"Streams are how you categorize posts in Tanzawa. By default Tanzawa creates streams to covert most basic IndieWeb content types. Open the Django Settings in your browser /admin/ Click add stream and fill in the form as you wish. Icon: Input an emoji of your choice. Name: This will appear on the left as navigation. Slug: Generally this is the name in lowercase and will appear in stream urls e.g. example.com/notes","title":"Add Streams / Modifying the Navigation"},{"location":"sites-using-tanzawa/","text":"Sites Using Tanzawa Is your site running Tanzawa? Open a pull request and add your site below. James Van Dyne","title":"Sites Using Tanzawa"},{"location":"sites-using-tanzawa/#sites-using-tanzawa","text":"Is your site running Tanzawa? Open a pull request and add your site below. James Van Dyne","title":"Sites Using Tanzawa"},{"location":"indieweb/relme/","text":"Rel-me rel-me is a way to identify yourself as the same person on another website or service from your own domain. Tanzawa allows you to register as many rel-me links as you'd like. All relme links will be listed in your <head> block of your website. Registering URLs To register rel-me urls, open /admin/indieweb/trelme/add/ or from the Dashboard click Settings -> Relme (located under Indieweb) -> Add Relme.","title":"Rel-me"},{"location":"indieweb/relme/#rel-me","text":"rel-me is a way to identify yourself as the same person on another website or service from your own domain. Tanzawa allows you to register as many rel-me links as you'd like. All relme links will be listed in your <head> block of your website.","title":"Rel-me"},{"location":"indieweb/relme/#registering-urls","text":"To register rel-me urls, open /admin/indieweb/trelme/add/ or from the Dashboard click Settings -> Relme (located under Indieweb) -> Add Relme.","title":"Registering URLs"},{"location":"plugins/custom-plugins/","text":"Custom Plugins As Tanzawa Plugins are regular Django applications, developing a Tanzawa Plugin has the same ergonomics as Django development. Requirements In order for your Plugin to be seen by Tanzawa, it must have: A Plugin class that inherits from apps.plugins.plugin.Plugin . This is the interface between Tanzawa and a plugin. A tanzawa_plugin.py or tanzawa_plugin python package that instantiates the plugin and registers it with the Tanzawa Plugin Pool. If your application lives outside of Tanzawa itself, you must install it manually by adding the package name to the PLUGINS environment variable. Plugin Interface Each Plugin is required to provide some base information to Tanzawa so users can understand the plugin's functionality. Name The name of the plugin. This is the main identifier for the user, so try to make it as simple and self-descriptive as possible. Identifier A reverse-url style unique identifier for the plugin. This is stored in the database to let Tanzawa know which plugins are active and is not shown the user. e.g. The bundled \"Now page\" plugin's identifier is blog.tanzawa.plugins.nowpage . Description Provide an easy to understand description of what your plugin provides. This should be a plain text string, but can also be rendered HTML using Django templates if you want to provide links. from django.template.loader import render_to_string ... @property def description(self): return render_to_string(\"now/description.html\") Settings URL Each plugin can provide a single URL that acts as the user's entry point to configure the plugin. This is the \"settings\" link that is displayed next to each plugin in the admin. from django import urls ... @property def settings_url(self): return urls.reverse_lazy(\"plugin_now_admin:update_now\") Top Navigation Providing top navigation requires two settings: has_public_top_nav and render_navigation . has_public_top_nav A boolean value indicating if a plugin is providing top menu items. render_navigation A function that renders the actual navigation. It has two inputs: context and render_location . context is a regular django context containing the entire context for that page. nav contains the id of the currently selected page. Use this variable to decide if your navigation is selected and should indicate as such e.g. underlined. render_location is the name of the location that Tanzawa is rendering. This could be used to provide different layouts depending on the location. from django import template ... def render_navigation( self, *, context: template.Context, render_location: str, ) -> str: \"\"\"Render the public facing navigation menu item.\"\"\" t = context.template.engine.get_template(\"now/navigation.html\") return t.render(context=context) Example top navigation template for desktop display. <a href=\"{% url \"plugin_now:now\" %}\" class=\"ml-2 leading-8 hidden md:inline-block{% if nav == \"now\" %} border-b-4 border-negroni-900{% endif %}\"> <span class=\"mr-1\">\ud83d\udc49</span>Now </a> Registering Your Plugin from plugins import plugin, pool class NowPlugin(plugin.Plugin): ... def get_plugin() -> plugin.Plugin: return NowPlugin() pool.plugin_pool.register_plugin(get_plugin()) Admin Views Views in the admin should be contained in admin_urls.py . Each view should be protected with the Django @login_required decorator to ensure anonymous users cannot change settings or access sensitive data. from django.urls import path from . import views app_name = \"plugin_now_admin\" urlpatterns = [ path(\"edit/\", views.UpdateNowAdmin.as_view(), name=\"update_now\"), ] The admin views will be automatically included at /a/plugins/slugified-plugin-name/ . Public Views Views that should be publicly accessible should be contained in urls.py . Note as plugin urls are included before stream urls, if your public urls match a user's stream, your plugin will take precedence. from django.urls import path from . import views app_name = \"plugin_now\" urlpatterns = [ path(\"now/\", views.PublicViewNow.as_view(), name=\"now\"), ] Migrations Tanzawa will automatically run migrations on two occasions: When the plugin is activated. When the server starts (to allow for automatic upgrades of the DB schema in the future). To disable automatically migrating when starting the server, set PLUGINS_RUN_MIGRATIONS_STARTUP to False in your .env file. Creating Migrations If your plugin is not enabled, first enable the plugin. ``` $ python3 apps/manage.py enable_plugin blog.tanzawa.plugins.nowpage Once the plugin is enabled you can make migrations as usual. $ python3 apps/manage.py makemigrations now ### Running Migrations Manually After a plugin is enabled you can run migrations as if it were a regular django application. $ python3 apps/manage.py migrate now ` ``` Templates Templates are regular Django templates and should be placed in a templates/<plugin-app-name> directory inside of your plugin.","title":"Custom Plugins"},{"location":"plugins/custom-plugins/#custom-plugins","text":"As Tanzawa Plugins are regular Django applications, developing a Tanzawa Plugin has the same ergonomics as Django development.","title":"Custom Plugins"},{"location":"plugins/custom-plugins/#requirements","text":"In order for your Plugin to be seen by Tanzawa, it must have: A Plugin class that inherits from apps.plugins.plugin.Plugin . This is the interface between Tanzawa and a plugin. A tanzawa_plugin.py or tanzawa_plugin python package that instantiates the plugin and registers it with the Tanzawa Plugin Pool. If your application lives outside of Tanzawa itself, you must install it manually by adding the package name to the PLUGINS environment variable.","title":"Requirements"},{"location":"plugins/custom-plugins/#plugin-interface","text":"Each Plugin is required to provide some base information to Tanzawa so users can understand the plugin's functionality.","title":"Plugin Interface"},{"location":"plugins/custom-plugins/#name","text":"The name of the plugin. This is the main identifier for the user, so try to make it as simple and self-descriptive as possible.","title":"Name"},{"location":"plugins/custom-plugins/#identifier","text":"A reverse-url style unique identifier for the plugin. This is stored in the database to let Tanzawa know which plugins are active and is not shown the user. e.g. The bundled \"Now page\" plugin's identifier is blog.tanzawa.plugins.nowpage .","title":"Identifier"},{"location":"plugins/custom-plugins/#description","text":"Provide an easy to understand description of what your plugin provides. This should be a plain text string, but can also be rendered HTML using Django templates if you want to provide links. from django.template.loader import render_to_string ... @property def description(self): return render_to_string(\"now/description.html\")","title":"Description"},{"location":"plugins/custom-plugins/#settings-url","text":"Each plugin can provide a single URL that acts as the user's entry point to configure the plugin. This is the \"settings\" link that is displayed next to each plugin in the admin. from django import urls ... @property def settings_url(self): return urls.reverse_lazy(\"plugin_now_admin:update_now\")","title":"Settings URL"},{"location":"plugins/custom-plugins/#top-navigation","text":"Providing top navigation requires two settings: has_public_top_nav and render_navigation .","title":"Top Navigation"},{"location":"plugins/custom-plugins/#has_public_top_nav","text":"A boolean value indicating if a plugin is providing top menu items.","title":"has_public_top_nav"},{"location":"plugins/custom-plugins/#render_navigation","text":"A function that renders the actual navigation. It has two inputs: context and render_location . context is a regular django context containing the entire context for that page. nav contains the id of the currently selected page. Use this variable to decide if your navigation is selected and should indicate as such e.g. underlined. render_location is the name of the location that Tanzawa is rendering. This could be used to provide different layouts depending on the location. from django import template ... def render_navigation( self, *, context: template.Context, render_location: str, ) -> str: \"\"\"Render the public facing navigation menu item.\"\"\" t = context.template.engine.get_template(\"now/navigation.html\") return t.render(context=context) Example top navigation template for desktop display. <a href=\"{% url \"plugin_now:now\" %}\" class=\"ml-2 leading-8 hidden md:inline-block{% if nav == \"now\" %} border-b-4 border-negroni-900{% endif %}\"> <span class=\"mr-1\">\ud83d\udc49</span>Now </a>","title":"render_navigation"},{"location":"plugins/custom-plugins/#registering-your-plugin","text":"from plugins import plugin, pool class NowPlugin(plugin.Plugin): ... def get_plugin() -> plugin.Plugin: return NowPlugin() pool.plugin_pool.register_plugin(get_plugin())","title":"Registering Your Plugin"},{"location":"plugins/custom-plugins/#admin-views","text":"Views in the admin should be contained in admin_urls.py . Each view should be protected with the Django @login_required decorator to ensure anonymous users cannot change settings or access sensitive data. from django.urls import path from . import views app_name = \"plugin_now_admin\" urlpatterns = [ path(\"edit/\", views.UpdateNowAdmin.as_view(), name=\"update_now\"), ] The admin views will be automatically included at /a/plugins/slugified-plugin-name/ .","title":"Admin Views"},{"location":"plugins/custom-plugins/#public-views","text":"Views that should be publicly accessible should be contained in urls.py . Note as plugin urls are included before stream urls, if your public urls match a user's stream, your plugin will take precedence. from django.urls import path from . import views app_name = \"plugin_now\" urlpatterns = [ path(\"now/\", views.PublicViewNow.as_view(), name=\"now\"), ]","title":"Public Views"},{"location":"plugins/custom-plugins/#migrations","text":"Tanzawa will automatically run migrations on two occasions: When the plugin is activated. When the server starts (to allow for automatic upgrades of the DB schema in the future). To disable automatically migrating when starting the server, set PLUGINS_RUN_MIGRATIONS_STARTUP to False in your .env file.","title":"Migrations"},{"location":"plugins/custom-plugins/#creating-migrations","text":"If your plugin is not enabled, first enable the plugin. ``` $ python3 apps/manage.py enable_plugin blog.tanzawa.plugins.nowpage Once the plugin is enabled you can make migrations as usual. $ python3 apps/manage.py makemigrations now ### Running Migrations Manually After a plugin is enabled you can run migrations as if it were a regular django application. $ python3 apps/manage.py migrate now ` ```","title":"Creating Migrations"},{"location":"plugins/custom-plugins/#templates","text":"Templates are regular Django templates and should be placed in a templates/<plugin-app-name> directory inside of your plugin.","title":"Templates"},{"location":"plugins/overview/","text":"Plugins Plugins allow you to create custom functionality for you Tanzawa website. They can be selectively enabled and disabled. Tanzawa Plugins are regular Django applications. They can provide: Custom URLs (public and admin facing) Database tables Navigation items in the header of public site Activation / Deactivation Plugins can be activated by clicking on the \"Enable\" button at /a/plugins/ . Alternatively you can enable them from the command line with the following command. python3 apps/manage.py enable_plugin <identifier> Likewise you can disable them by running the disable_plugin command. python3 apps/manage.py disable_plugin <identifier> Refer to Custom Plugins for a guide on writing your own plugins.","title":"Plugins"},{"location":"plugins/overview/#plugins","text":"Plugins allow you to create custom functionality for you Tanzawa website. They can be selectively enabled and disabled. Tanzawa Plugins are regular Django applications. They can provide: Custom URLs (public and admin facing) Database tables Navigation items in the header of public site","title":"Plugins"},{"location":"plugins/overview/#activation-deactivation","text":"Plugins can be activated by clicking on the \"Enable\" button at /a/plugins/ . Alternatively you can enable them from the command line with the following command. python3 apps/manage.py enable_plugin <identifier> Likewise you can disable them by running the disable_plugin command. python3 apps/manage.py disable_plugin <identifier> Refer to Custom Plugins for a guide on writing your own plugins.","title":"Activation / Deactivation"},{"location":"themes/overview/","text":"Overview Themes allow you to customize the color scheme used by your website. Theme location Themes live in front/src/themes/ . Each theme must be contained in its own directory. Distribution files must be in front/src/themes/<themename>/static/<themename>/ . The distribution stylesheet must be named style.css and be at the root of the static directory i.e. front/src/themes/<themename>/static/<themename>/style.css How to create a theme Create a tailwind.config.js in your new theme directory. To generate the appropriate styles, set the content value of your tailwind config as follows: content: [ './../../../../apps/templates/base_public.html', './../../../../apps/templates/registration/login.html', '../../../../apps/templates/public/**/*.html', '../../../../src/public_controllers/*.js', ] Setup your theme and define the following colors: theme: { colors: { 'white': '#ffffff', 'black': '#000000', 'transparent': 'transparent', 'current': 'currentColor', 'primary': { DEFAULT: '#dddddd', // main background color '600': '#CCCCCC', // button color '800': '#BFBFBF', // button border color }, 'secondary': { DEFAULT: '#999CFC', // selection underline / site name color '600': '#97948f', // footer/line between posts '800': '#7476d6', '900': '#1a1c64', }, }, extend: { spacing: { '99': '45rem', }, }, variants: { extend: {}, }, }, Inside your style.css, in addition to the tailwind base classes, define the following classes: @tailwind base; @tailwind components; @tailwind utilities; .selected { @apply border-r-4 border-secondary; } .primary-button { @apply rounded bg-primary-600 border-primary-800 px-3 py-1 border; } Building your theme Tanzawa themes require Tailwind 3.0. From your theme's root directory, run the following command to build your theme. $ npx tailwindcss -i ./style.css -o ./static/<themename>/style.css Add --watch at the end of the command during development of your theme to automatically recompile the theme as you make changes to the css. Activating your theme Activate your theme in the Django admin by visiting admin/settings/msitesettings/1/change/ , selecting your theme from the dropdown, and saving. Note in production usages of Tanzawa, you must start the django server and run manage.py collectstatic management command after uploading your theme to allow access to the new theme assets and styles.","title":"Overview"},{"location":"themes/overview/#overview","text":"Themes allow you to customize the color scheme used by your website.","title":"Overview"},{"location":"themes/overview/#theme-location","text":"Themes live in front/src/themes/ . Each theme must be contained in its own directory. Distribution files must be in front/src/themes/<themename>/static/<themename>/ . The distribution stylesheet must be named style.css and be at the root of the static directory i.e. front/src/themes/<themename>/static/<themename>/style.css","title":"Theme location"},{"location":"themes/overview/#how-to-create-a-theme","text":"Create a tailwind.config.js in your new theme directory. To generate the appropriate styles, set the content value of your tailwind config as follows: content: [ './../../../../apps/templates/base_public.html', './../../../../apps/templates/registration/login.html', '../../../../apps/templates/public/**/*.html', '../../../../src/public_controllers/*.js', ] Setup your theme and define the following colors: theme: { colors: { 'white': '#ffffff', 'black': '#000000', 'transparent': 'transparent', 'current': 'currentColor', 'primary': { DEFAULT: '#dddddd', // main background color '600': '#CCCCCC', // button color '800': '#BFBFBF', // button border color }, 'secondary': { DEFAULT: '#999CFC', // selection underline / site name color '600': '#97948f', // footer/line between posts '800': '#7476d6', '900': '#1a1c64', }, }, extend: { spacing: { '99': '45rem', }, }, variants: { extend: {}, }, }, Inside your style.css, in addition to the tailwind base classes, define the following classes: @tailwind base; @tailwind components; @tailwind utilities; .selected { @apply border-r-4 border-secondary; } .primary-button { @apply rounded bg-primary-600 border-primary-800 px-3 py-1 border; }","title":"How to create a theme"},{"location":"themes/overview/#building-your-theme","text":"Tanzawa themes require Tailwind 3.0. From your theme's root directory, run the following command to build your theme. $ npx tailwindcss -i ./style.css -o ./static/<themename>/style.css Add --watch at the end of the command during development of your theme to automatically recompile the theme as you make changes to the css.","title":"Building your theme"},{"location":"themes/overview/#activating-your-theme","text":"Activate your theme in the Django admin by visiting admin/settings/msitesettings/1/change/ , selecting your theme from the dropdown, and saving. Note in production usages of Tanzawa, you must start the django server and run manage.py collectstatic management command after uploading your theme to allow access to the new theme assets and styles.","title":"Activating your theme"}]}